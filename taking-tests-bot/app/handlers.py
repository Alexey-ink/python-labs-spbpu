from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import app.database.requests as rq
import app.keybords as kb

import logging

class Form(StatesGroup):
    waiting_for_category_name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    waiting_for_test_name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
    waiting_for_question_text = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
    waiting_for_question_options = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
    waiting_for_correct_option = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞

router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_user(
        tg_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    await message.answer(
        "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤!\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é: ",
        reply_markup=kb.main
    )


@router.callback_query(F.data == 'new-test')
async def new_test(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é:",
        reply_markup=await kb.choose_category()
    )

    await state.set_state(Form.waiting_for_category_name)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏


@router.callback_query(F.data == 'delete-topic-test')
async def handle_delete_topic_test(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –∏–ª–∏ —Ç–µ–º—ã."""
    keyboard = InlineKeyboardBuilder()

    keyboard.add(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç', callback_data='delete-test'))
    keyboard.add(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É', callback_data='delete-topic'))
    keyboard.add(InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='to_main'))

    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.adjust(2).as_markup()
    )

@router.callback_query(F.data == 'delete-test')
async def handle_delete_test(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    tests = await rq.get_all_tests()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤

    if not tests:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)
        return

    keyboard = InlineKeyboardBuilder()

    for test in tests:
        keyboard.add(InlineKeyboardButton(text=test.title, callback_data=f'delete_test_{test.id}'))

    keyboard.add(InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='delete-topic-test'))


    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboard.adjust(2).as_markup()
    )

@router.callback_query(F.data.startswith('delete_test_'))
async def confirm_delete_test(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞."""
    test_id = int(callback.data.split('_')[2])

    try:
        await rq.delete_test(test_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await callback.message.edit_text("–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", reply_markup=None)
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=kb.main)
        
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {e}")

@router.callback_query(F.data == 'delete-topic')
async def handle_delete_topic(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    categories = await rq.get_categories()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π

    if not categories:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)
        return

    keyboard = InlineKeyboardBuilder()

    for category in categories:
        keyboard.add(InlineKeyboardButton(text=category.name, callback_data=f'delete_category_{category.id}'))

    keyboard.add(InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='delete-topic-test'))

    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboard.adjust(2).as_markup()
    )

@router.callback_query(F.data.startswith('delete_category_'))
async def confirm_delete_category(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    category_id = int(callback.data.split('_')[2])

    try:
        await rq.delete_category(category_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await callback.message.edit_text("–¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=None)
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=kb.main)
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–º—ã: {e}")



@router.callback_query(F.data == 'create_new_category')
async def create_new_category(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await callback.message.edit_text(
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤",
    )
    await state.set_state(Form.waiting_for_category_name)  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏


@router.message(Form.waiting_for_category_name)
async def process_new_category(message: Message, state: FSMContext):
    topic_name = message.text.strip()

    try:
        await rq.new_category(topic_name)
        await message.answer(f"–¢–µ–º–∞ '{topic_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        await message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é:",
            reply_markup=await kb.choose_category()
            )
        await state.clear() # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")


@router.callback_query(F.data.startswith('category_'))
async def choose_category(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split('_')[1])  # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await callback.answer('')
    await callback.message.edit_text(
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞:",
    )
    await state.update_data(category_id=category_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    await state.set_state(Form.waiting_for_test_name)  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ç–µ—Å—Ç–∞


@router.message(Form.waiting_for_test_name)
async def process_new_test(message: Message, state: FSMContext):
    test_name = message.text.strip()

    if not test_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    try:
        data = await state.get_data()
        category_id = data.get('category_id')

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        new_test = await rq.create_test(test_name, category_id)
        if not new_test:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
        await message.answer(
            f"–¢–µ—Å—Ç '{test_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
            reply_markup=await kb.test_created_keyboard(new_test.id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
        )
        await state.clear()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {e}")


@router.callback_query(F.data == 'take-test')
async def take_test(callback: CallbackQuery, state: FSMContext):
    categories = await rq.get_categories()
    
    if not categories:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
    keyboard = await kb.categories()
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞:",
        reply_markup=keyboard
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await state.set_state(Form.waiting_for_category_name)


@router.callback_query(F.data == 'show-tests')
async def show_tests(callback: CallbackQuery):
    await callback.answer('')
    try:
        tests = await rq.get_all_tests()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
        if tests:
            test_list = "\n".join([f"<i>üìù</i> <b> {test.title} </b> - <i>–¢–µ–º–∞:</i> {test.category.name}\n" for test in tests])
        else:
            test_list = "<i>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.</i>"

        # –£–¥–∞–ª—è–µ–º –º–µ–Ω—é –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ—Å—Ç–∞–º–∏
        await callback.message.edit_text(
            text=f"<b>–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç—ã:\n</b>\n{test_list}",
            reply_markup=None,
            parse_mode="HTML"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=kb.main, parse_mode="HTML")

    except Exception as e:
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: <i>{e}</i>", parse_mode="HTML")



@router.callback_query(F.data.startswith('test_'))
async def start_test(callback: CallbackQuery, state: FSMContext):
    test_id = int(callback.data.split('_')[1])  # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    data = await state.get_data()
    category_id = data.get('category_id')

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ
    test = await rq.get_test_by_id(test_id)
    
    if not test:
        await callback.answer("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü—Ä–∏–º–µ—Ä –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ ‚Äî –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —ç—Ç–æ–≥–æ
    await callback.message.edit_text(
        text=f"–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç: {test.title}. –£–¥–∞—á–∏!",
        reply_markup=kb.start_test_keyboard() 
    )


@router.callback_query(F.data.startswith('create-question_'))
async def create_question(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ—Å—Ç–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å
    test_id = int(callback.data.split('_')[1])  # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ—Å—Ç–∞ –∏–∑ callback_data

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ—Å—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    await state.update_data(test_id=test_id)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    await callback.message.edit_text(
        text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞:"
    )
    await state.set_state(Form.waiting_for_question_text)


@router.message(Form.waiting_for_question_text)
async def process_new_question(message: Message, state: FSMContext):
    question_text = message.text.strip()

    if not question_text:
        await message.answer("–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    await state.update_data(question_text=question_text)
    
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ):")
    
    await state.set_state(Form.waiting_for_question_options)


@router.message(Form.waiting_for_question_options)
async def process_question_options(message: Message, state: FSMContext):
    options = message.text.strip()

    if not options:
        await message.answer("–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    data = await state.get_data()
    question_options = data.get('question_options', [])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 4
    if len(question_options) >= 4:
        await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ ‚Äî 4. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤–≤–æ–¥.")
        return

    question_options.append(options)
    await state.update_data(question_options=question_options)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
    if len(question_options) < 4:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ì–æ—Ç–æ–≤–æ', —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞.")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4):")
        await state.set_state(Form.waiting_for_correct_option)


@router.message(Form.waiting_for_correct_option)
async def process_correct_option(message: Message, state: FSMContext):
    try:
        correct_option = int(message.text.strip())

        if correct_option < 1 or correct_option > 4:
            await message.answer("–ù–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")

        question_text = data.get('question_text')
        question_options = data.get('question_options', [])

        if len(question_options) < 4:
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º correct_option –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(correct_option=correct_option)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logging.info(f"–î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å: {question_text}, –≤–∞—Ä–∏–∞–Ω—Ç—ã: {question_options}, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: {correct_option}")

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        await rq.create_question(
            question_text=question_text,
            options=question_options,
            correct_option=correct_option,
            test_id=data.get('test_id')
        )

        await message.answer(f"–í–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=kb.main)
        await state.clear()

    except ValueError:
        await message.answer("–ù–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")



@router.callback_query(F.data == "add-delete-tests")
async def handle_add_delete_tests(callback: CallbackQuery):
    keyboard = await kb.categories_tests()
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–µ—Å—Ç—ã:",
        reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("category-tests_"))
async def handle_category_selection(callback: CallbackQuery):
    category_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    tests = await rq.get_tests_by_category(category_id)
    
    if not tests:
        await callback.answer("–ü–æ —ç—Ç–æ–π —Ç–µ–º–µ —Ç–µ—Å—Ç–æ–≤ –Ω–µ—Ç.", show_alert=True)  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ show_alert –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        return

    keyboard = InlineKeyboardBuilder()

    for test in tests:
        keyboard.add(InlineKeyboardButton(text=test.title, callback_data=f"edit-test_{test.id}"))

    keyboard.add(InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="add-delete-tests"))
    keyboard.add(InlineKeyboardButton(text="‚≠ïÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main"))
    
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤:",
        reply_markup=keyboard.adjust(1).as_markup()
    )


@router.callback_query(F.data.startswith("edit-test_"))
async def handle_test_selection(callback: CallbackQuery):
    test_id = int(callback.data.split("_")[1])
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã", callback_data=f"add_questions_{test_id}")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã", callback_data=f"delete_questions_{test_id}")],
        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º", callback_data="add-delete-tests")],
        [InlineKeyboardButton(text="‚≠ïÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main")]
    ])
    
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:",
        reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("add_questions_"))
async def handle_add_questions(callback: CallbackQuery, state: FSMContext):
    test_id = int(callback.data.split("_")[2])

    await state.update_data(test_id=test_id)

    await callback.message.edit_text(
        text=f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ —Å ID {test_id}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
    )

    await callback.message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞:"
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
    await state.set_state(Form.waiting_for_question_text)
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤.


@router.callback_query(F.data.startswith("delete_questions_"))
async def handle_delete_questions(callback: CallbackQuery):
    test_id = int(callback.data.split("_")[2])

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    questions = await rq.get_questions_by_test(test_id)
    keyboard = InlineKeyboardBuilder()
    
    for question in questions:
        keyboard.add(InlineKeyboardButton(text=question.question_text, callback_data=f"delete_question_{question.id}"))
    
    keyboard.add(InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data=f"edit-test_{test_id}"))
    keyboard.add(InlineKeyboardButton(text="‚≠ïÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main"))

    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboard.adjust(1).as_markup()
    )

@router.callback_query(F.data.startswith("delete_question_"))
async def handle_delete_question(callback: CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ callback_data
    question_id = int(callback.data.split("_")[2])

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ ID
        question = await rq.get_question_by_id(question_id)
        
        if not question:
            await callback.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await rq.delete_question(question_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.edit_text(
            text=f"–í–æ–ø—Ä–æ—Å '{question.question_text}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            reply_markup=None  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        )
        
        # –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ–Ω—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=kb.main)

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")


@router.callback_query(F.data == 'to_main')
async def to_main(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:",
        reply_markup=kb.main
    )
